#Requires -Version 5.1
<#
.SYNOPSIS
    Azure Security Posture and Vulnerability Assessment
.DESCRIPTION
    Collects Secure Scores and security assessments from Microsoft Defender for Cloud.
#>

[CmdletBinding()]
param()

Set-StrictMode -Version Latest
$ErrorActionPreference = "Continue"

# Determine paths
$ScriptDir = Split-Path -Parent $PSCommandPath
$RootDir = Split-Path -Parent $ScriptDir
$OutDir = Join-Path $RootDir "out"
$ScopePath = Join-Path $OutDir "scope.json"

Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "Security Posture & Vulnerability Assessment" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

# Verify scope file exists
if (-not (Test-Path $ScopePath)) {
    Write-Error "Missing scope.json. Please run .\01_scope_discovery.ps1 first."
    exit 1
}

# Load scope
Write-Host "Loading scope file..." -ForegroundColor Yellow
try {
    $scopeContent = Get-Content $ScopePath -Raw
    $scope = $scopeContent | ConvertFrom-Json
    Write-Host "  Loaded $($scope.Count) subscription(s) from scope" -ForegroundColor Green
}
catch {
    Write-Error "Failed to parse scope.json: $_"
    exit 1
}

Write-Host ""

# Initialize counters
$successCount = 0
$errorCount = 0
$secureScoresCollected = 0
$totalAssessments = 0

# Process each subscription
$counter = 0
foreach ($s in $scope) {
    $counter++
    $sub = $s.subscriptionId
    if (-not $sub) { 
        Write-Host "[$counter/$($scope.Count)] Skipping entry with no subscription ID" -ForegroundColor Gray
        continue 
    }
    
    $displayName = $s.displayName
    if (-not $displayName) { $displayName = $sub }
    
    Write-Host "[$counter/$($scope.Count)] Processing: $displayName" -ForegroundColor Cyan
    Write-Host "  Subscription ID: $sub" -ForegroundColor Gray
    
    # Skip disabled subscriptions
    if ($s.state -ne "Enabled") {
        Write-Host "  [SKIPPED] Subscription state: $($s.state)" -ForegroundColor Yellow
        continue
    }
    
    try {
        # Secure Score
        Write-Host "  Collecting Secure Score..." -ForegroundColor Yellow
        $scoreOutput = az security secure-scores list --subscription $sub 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            try {
                # Filter out warning lines before parsing
                $jsonLines = $scoreOutput | Where-Object { $_ -notmatch '^WARNING:' -and $_ -notmatch 'InsecureRequestWarning' -and $_ -notmatch 'urllib3' -and $_ -notmatch 'site-packages' -and $_.Trim() -ne '' }
                $cleanJson = $jsonLines -join "`n"
                
                $secureScore = $cleanJson | ConvertFrom-Json
                $cleanJson | Set-Content -Path (Join-Path $OutDir "$sub`_secure_score.json") -Encoding UTF8
                
                # Try to extract the score value (structure: array of {current, max, displayName})
                $scoreValue = $null
                $maxScore = $null
                if ($secureScore -is [array] -and $secureScore.Count -gt 0) {
                    # New structure: score is at top level
                    $scoreValue = $secureScore[0].current
                    $maxScore = $secureScore[0].max
                }
                elseif ($secureScore.current) {
                    # Single object
                    $scoreValue = $secureScore.current
                    $maxScore = $secureScore.max
                }
                elseif ($secureScore.properties.score.current) {
                    # Old structure (fallback)
                    $scoreValue = $secureScore.properties.score.current
                    $maxScore = $secureScore.properties.score.max
                }
                
                if ($scoreValue -ne $null) {
                    $secureScoresCollected++
                    if ($maxScore) {
                        Write-Host "    [OK] Secure Score: $scoreValue / $maxScore" -ForegroundColor Green
                    }
                    else {
                        Write-Host "    [OK] Secure Score: $scoreValue" -ForegroundColor Green
                    }
                }
                else {
                    Write-Host "    [OK] Secure Score data retrieved" -ForegroundColor Green
                }
            }
            catch {
                Write-Host "    [WARN] Could not parse Secure Score: $_" -ForegroundColor Yellow
                Write-Host "      Raw output preview: $($cleanJson.Substring(0, [Math]::Min(200, $cleanJson.Length)))" -ForegroundColor Gray
                "{}" | Set-Content -Path (Join-Path $OutDir "$sub`_secure_score.json") -Encoding UTF8
            }
        }
        else {
            Write-Host "    [WARN] Failed to retrieve Secure Score - Exit code: $LASTEXITCODE" -ForegroundColor Yellow
            Write-Host "      Output preview: $($scoreOutput | Select-Object -First 3)" -ForegroundColor Gray
            "{}" | Set-Content -Path (Join-Path $OutDir "$sub`_secure_score.json") -Encoding UTF8
        }
        
        # Security Assessments
        Write-Host "  Collecting security assessments..." -ForegroundColor Yellow
        $assessOutput = az security assessment list --subscription $sub 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            try {
                # Filter out warning lines before parsing
                $assessJsonLines = $assessOutput | Where-Object { $_ -notmatch '^WARNING:' -and $_ -notmatch 'InsecureRequestWarning' -and $_ -notmatch 'urllib3' -and $_ -notmatch 'site-packages' -and $_.Trim() -ne '' }
                $assessCleanJson = $assessJsonLines -join "`n"
                
                # Save raw JSON (Azure returns duplicate keys which breaks PowerShell JSON parser)
                $assessCleanJson | Set-Content -Path (Join-Path $OutDir "$sub`_security_assessments.json") -Encoding UTF8
                
                # Try to count assessments by counting array elements in raw JSON
                $assessCount = 0
                if ($assessCleanJson -match '^\s*\[') {
                    # Rough count by counting opening braces after the array start
                    $assessCount = ([regex]::Matches($assessCleanJson, '\{\s*"')).Count
                }
                
                if ($assessCount -gt 0) {
                    $totalAssessments += $assessCount
                    Write-Host "    [OK] Found ~$assessCount security assessment(s)" -ForegroundColor Green
                }
                else {
                    Write-Host "    [OK] Security assessments retrieved" -ForegroundColor Green
                }
            }
            catch {
                Write-Host "    [WARN] Could not save security assessments: $_" -ForegroundColor Yellow
                "[]" | Set-Content -Path (Join-Path $OutDir "$sub`_security_assessments.json") -Encoding UTF8
            }
        }
        else {
            Write-Host "    [WARN] Failed to retrieve security assessments - Exit code: $LASTEXITCODE" -ForegroundColor Yellow
            Write-Host "      Output preview: $($assessOutput | Select-Object -First 3)" -ForegroundColor Gray
            "[]" | Set-Content -Path (Join-Path $OutDir "$sub`_security_assessments.json") -Encoding UTF8
        }
        
        $successCount++
        Write-Host "  [COMPLETE]" -ForegroundColor Green
    }
    catch {
        Write-Host "  [ERROR] Failed to process subscription: $_" -ForegroundColor Red
        $errorCount++
    }
    
    Write-Host ""
}

# Summary
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "Security Posture Summary" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host "  Subscriptions processed: $successCount" -ForegroundColor Green
if ($errorCount -gt 0) {
    Write-Host "  Subscriptions with errors: $errorCount" -ForegroundColor Red
}
Write-Host "  Subscriptions with Secure Score: $secureScoresCollected" -ForegroundColor White
Write-Host "  Total security assessments: $totalAssessments" -ForegroundColor White
Write-Host ""
Write-Host "Output directory: $OutDir" -ForegroundColor Cyan
Write-Host ""

if ($successCount -gt 0) {
    Write-Host "[SUCCESS] Security posture and vulnerability assessment complete!" -ForegroundColor Green
}
else {
    Write-Host "[WARNING] No subscriptions were successfully processed" -ForegroundColor Yellow
}
